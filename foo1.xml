<class>
	<keyword> class </keyword>
	<identifier> class </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Square </keyword>
		<identifier> square </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> direction </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> SquareGame </keyword>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
					<letStatement>
						<keyword> let </keyword>
						<identifier> square </identifier>
						<symbol> = </symbol>
						<expression>
							<term>
								<subroutineCall>
									<identifier> Square </identifier>
									<symbol> . </symbol>
									<identifier> new </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 30 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
								</subroutineCall>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
<class>
	<keyword> class </keyword>
	<identifier> class </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Square </keyword>
		<identifier> square </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> direction </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> SquareGame </keyword>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
					<letStatement>
						<keyword> let </keyword>
						<identifier> square </identifier>
						<symbol> = </symbol>
						<expression>
							<term>
								<subroutineCall>
									<identifier> Square </identifier>
									<symbol> . </symbol>
									<identifier> new </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 30 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
								</subroutineCall>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<letStatement>
						<keyword> let </keyword>
						<identifier> direction </identifier>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
<class>
	<keyword> class </keyword>
	<identifier> class </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Square </keyword>
		<identifier> square </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> direction </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> SquareGame </keyword>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
					<letStatement>
						<keyword> let </keyword>
						<identifier> square </identifier>
						<symbol> = </symbol>
						<expression>
							<term>
								<subroutineCall>
									<identifier> Square </identifier>
									<symbol> . </symbol>
									<identifier> new </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 30 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
								</subroutineCall>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<letStatement>
						<keyword> let </keyword>
						<identifier> direction </identifier>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
<class>
	<keyword> class </keyword>
	<identifier> class </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Square </keyword>
		<identifier> square </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> direction </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> SquareGame </keyword>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
					<letStatement>
						<keyword> let </keyword>
						<identifier> square </identifier>
						<symbol> = </symbol>
						<expression>
							<term>
								<subroutineCall>
									<identifier> Square </identifier>
									<symbol> . </symbol>
									<identifier> new </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 30 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
								</subroutineCall>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
